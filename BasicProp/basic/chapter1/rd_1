第一: 为什么选择Python
    1、相对于脚本语言，更注重可读性和一致性。支持面向对象的编程语言
    2、开发效率
        1)、相对于C、C++、java等编译/静态的类型语言，源代码更小
        2)、没有单独的编译阶段，源代码直接运行，运行之前编译
    3、可移植性
    4、库的支持
        1)、Python官方发行版提供了众多系统库
        2)、除此之外，还可以自行开发库，和使用众多的第三方库
    5、集成机制
        1)、通过集成机制可以轻松的与应用程序的其他部分通信，如Python可以调用C、C++的库，可被C、C++程序调用;可以与Java组件集成;可以与COM、.NET框架通信
            可以使用SOAP，XML_RPC，CORBA等规范


第二: Python是脚本语言吗
    Python是一门多用途的编程语言，时常扮演着脚本语言的角色。一般而言，可以当作脚本语言的方式使用。作为一种很好的Shell脚本语言
    Python也可作为一门系统编程语言，开发特定领域的应用系统


第三: Python的应用领域
    1、系统编程
       Python集成了操作系统服务的内置接口。标准库绑定了POSIX以及其他操作系统工具: 环境变量，文件，套接字，管道，进程，线程，正则表达式，命令行参数，标准流接口，Shell命令启动器，文件操作
    2、GUI
       TKinter的标准面向对象接口Tk GUI API，可以导入其他的GUI库
    3、Internet
       Internet模块，Web应用库: Django,TurboGears,web2py,Pylons,Zope,WebWare
    4、组件集成
       C、C++库集成等
    5、数据库接口
       主流数据库，MySql,Oracle,PostgreSql...
    6、数值计算 && 科学计算
       NumPy, SciPy等库，完美替代Matlab
    7、游戏、图像、人工智能、机器人等领域


第四: 特性
    1、存在于传统脚本语言与系统编程语言(C/C++/Java)之间。这意味着Python可以在脚本中提供高级语言中的功能
    2、动态类型
       Python中变量不用指定类型，没有变量声明这回事，不约束数据的类型。在运行过程中随时跟踪对象的种类
    3、自动内存管理
       对象分配和垃圾回收
    4、面向对象语言
       module,class,oop...
    5、内置数据结构
       字符串，列表，元组，字典...
    6、功能强大的第三方库支持
       module
    7、编译成字节码，虚拟机上解释执行
       执行效率？
    8、import this