第一: 内置基础核心类型
    数字
        整数类型 <class 'int'>, python没有限制其大小; 十进制数字面量:123654; 二进制数字面量:0b11011; 八进制数字面量:0o71011; 十六进制数字面量:0xabc1209; 不可变; 可hash(hashable)
        浮点数<class 'float'>, 8个字节存储:1位符号位，11位指数，52位有效数字，即双精度浮点型; 字面量: 1.09, 1.09E100, 3.14e-10; 不可变; 可hash(hashable)
            浮点数的讨论@see project-collects/project-java
        decimal
            Decimal, 存储精确; 计算确定; 指定小数保存位数; 舍入或者截断规则
        fraction
            Fraction, Fraction(1, 3)#分子，分母是整数: 存储精确; 计算确定; 指定小数保存位数; 舍入或者截断规则
        复数       3+4j, 3.0+4.0j, todo

    字符串
        字符串类型 <class 'str'>
        s[index]按索引取值, s[i:j]按[i,j)分片取值, i默认值0, j默认值len(s), index/i/j可以取负数, 最后一个数为-1，以此类推
            索引取值，分片取值，@see chapter2.py/# 第二题、索引运算和分片运算
        索引赋值，分片赋值报错;
        合并运算: s1 + s2: 合并运算，新创建字符串对象保存s1，s2合并后的值(不可变性、运算符重载)
        重复运算: s1 * 8, 重复运算，新创建字符串对象保存s1重复8次的字符串(不可变性、运算符重载)
        不可变性: 字符串对象提供的replace,split等方法不能够修改原字符串
        可迭代(iterable)
        可hash(hashable)
        属于python中序列
        查看源码: python中源码文件即找*.py即可，但是很遗憾，里面很多没有实现，具体的实现在C语言中
           例如: def next(...):
                    pass
           py文件中定义的next函数，使用pass占位符，具体实现代码用C写的
           github/cpython clone源代码看
        字符串more @link 第三: 字符串与编码

    元组
        元素任意类型; 有序; 不可修改; 是linked还是array??
        <class 'tuple'>, tuple字面量: (1, "2", [1, 2], ("3", 2))
        tp[index]按索引取值, tp[i:j]按[i, j)分片取值，i默认值0，j默认值len(tp), index/i/j可以取负数, 最后一个数为-1，以此类推
            索引取值，分片取值，@see chapter2.py/# 第二题、索引运算和分片运算
        嵌套
        可迭代(iterable)
        可hash(hashable)

    列表
        元素任意类型; 有序性; 是linked还是array??
        <class 'list'>, 列表字面量: [1, '字符串', ['2', '子列表']]
        lst[index]按索引取值, lst[i:j]按[i, j)分片取值，i默认值0，j默认值len(lst), index/i/j可以取负数, 最后一个数为-1，以此类推
            索引取值，索引赋值，分片取值，分片赋值，@see chapter2.py/# 第二题、索引运算和分片运算
        嵌套; 二维数组m = [[1, 2, 3],
                         [4, 5, 6],
                         [7, 8, 9]]   m[0]-->[1,2,3], m[1][2]-->6
        相等性:  l1 = [1, [2], 3]
                l2 = [1, [3], 2]
                print(l1 < l2)  # True, 深度优先遍历
        可迭代(iterable)
        列表解析表达式: col = [per[1] for per in m]
        type(lst) == list or isinstance(type(lst))

    字典
        key类型:hashable type,value任意类型; 无序性; non-duplicate key; allow None key and None value
        <class 'dict'>, 字典字面量: {"key1": "value", "key2": ['list']}
        hash映射表: key的hash运算找桶，hash碰撞时比较key的值，如果key值相等，覆盖(逻辑和HashMap一致)
        d[key]: 根据key取值,没有key抛异常(与返回None值区别开来)
        d[key]=value: 覆盖或者插入
        嵌套
        可迭代(iterable)
        列表解析表达式

    集合
        元素类型:hashable type; 无序性; 可修改; non-duplicate key; allow None key
        <class 'set'>, 集合字面量: {1, '2'}
        可通过add等方法修改
        可迭代(iterable)

    None
        l = None
        print(type(l))   //<class 'NoneType'>
        lst = [None, None]
        print(len(lst))   //2
        即python版null
    布尔
        boolean字面量: True,False
        b = True
        print(b)        //True
        print(type(b))  //<class 'bool'>
    数组
        有序
        存储模型类似与 java中primitive数组
        is iterable, but is not Iterator
        is mutable
        支持索引操作，分片操作


第二: 对象引用
python中没有基本类型，int也是一种类类型: <class 'int'>，正因为<class 'int'>不是基本类型(基本类型的int有大小限制如4字节，why基本类型有小大限制,@see如下)，他存放的整数值才可以是无限大的
<class 'int'>、<class 'str'> 不可变
a = 1           # a--->1: 创建int对象存1，a指向该对象(a变量存引用值)
b = a           # b--->1: b指向a指向的对象，即将a变量的引用值赋给b变量
a = a + 2       # a--->3: 根据a变量引用取得整数1，和整数2做加法运算，得到整数3，创建int对象存3，a指向该对象

print(a)  # 3
print(b)  # 1


java中的int是基本类型，不是引用的形式
int a = 1;      # 线程栈中声明变量a，开辟int类型空间，存放1
int b = a;      # 线程栈中声明变量b，开辟int类型空间，存放1
a = a + 2;      # 根据变量a取值+2得到3，存入变量a的空间

print(a)  # 3
print(b)  # 1


java中的相同机制
String是类类型，并且是不可变的
String a = "abc";   # 变量a指向 字符串对象("abc")
String b = a;       # 变量b指向 a指向的字符串对象
a = a + "--";       # 取变量a的值+"--"得到"abc--", 创建字符串对象("abc--"){字符串对象是不可变的，所有会创建新的字符串对象}, 变量a指向字符串对象("abc--")

print(a);  # abc
print(b);  # abc--


基本类型的设计理念
1、java中基本类型: 类型和大小
   eg，int a = 1; # 线程栈中声明变量a，开辟int类型空间（空间有大小规定,4字节），存放1
        a变量  ----
             | 1  |
              ----

   eg，class Obj {
          int a;
          OtherObj other;
          public Obj(int a) {
            this.a = a;
            other = new OtherObj();
          }
      }
      Obj obj = new Obj(1);  # 内存中创建Obj类型的对象，线程栈中声明变量obj(固定大小如2字节，存放引用值)，指向创建的对象
      obj变量  ----                Obj类型对象 {
             |引用 | ---------->            int a:            ----     Obj类型对象的内存空间中声明变量a，开辟int类型空间（空间有大小规定,4字节），存放1
              ----                                          | 1  |
                                                             ----
                                           OtherObj other;   Obj类型对象的内存空间中声明变量other(固定大小如2字节，存放引用值)，指向OtherObj类型的对象
                                  }
2、python中没有基本类型
   eg， a = 1  # 变量a存放引用值，引用指向class<'int'>类型的对象
   eg，class Obj
       obj = new Obj  # 变量obj存放引用值，引用指向class<'Obj'>类型的对象


3、why基本类型有小大限制 ？
考虑如下代码 method(int i, Obj obj)，这段代码中，如果不知道int的大小，就没办法声明int的内存空间了
                                   注意，Obj这里传递的是引用值(引用值大小一定)

4、类型检查机制
  java变量有类型: 声明一个变量时指定的类型
  python语法上没有类型检查机制: 因为python的变量没有类型,变量只是保存引用值,变量可以随意指向任意对象
  eg:
  lst[i:j] = param  # 列表分片赋值运算时
                    # param可以是任意对象，语法上没有检查是否是iterable的，实际上也没办法检查，因为python中iterable不是以基类的形式出现的，而是更像一种协议: 规定__iter__方法
                    # 运行时会调用param.__iter__方法以迭代，如果param指向的对象没有__iter__方法(can not iterable)，则报错

  i = 1
  for x in i:    # 运行时，TypeError: 'int' object is not iterable
    print(x)


第三: 字符串与编码

@see chapter2-7.py
and 编码more @see project-collects/project-java

s = "中h𝄞1"
变量s存引用值  --->  class<'str'>类型对象{
                        [
                            引用          -------> class<'int'>类型对象（该对象的内存空间中开辟一块空间存unicode字符'中'的码点）
                            引用          -------> class<'int'>类型对象（该对象的内存空间中开辟一块空间存unicode字符'h'的码点）
                            引用          -------> class<'int'>类型对象（该对象的内存空间中开辟一块空间存unicode字符'𝄞'的码点）
                        ]
                   }


第四: list

lst = [1, ["1", 2], "123"]  # 当遇到[]会创建列表对象，lst变量存引用值，指向列表对象
变量lst存引用值 --->  class<'list'>类型对象{
                        [
                            引用         -------> class<'int'>类型对象（该对象的内存空间中开辟一块空间存数字1）
                            引用         -------> class<'list'>类型对象
                            引用         -------> class<'str'>类型对象
                        ]
                    }


# 索引运算、分片运算 @see chapter2.py/# 第二题、索引运算和分片运算

## 对象引用 start
# 索引取值，分片取值拷贝引用值
lst = [1, [1, 2]]
lst_2 = lst[0:]
print(lst[0] is lst_2[0])  # True
print(lst[1] is lst_2[1])  # True


# 只是拷贝引用值(所以当对象是可变的时候要特别注意)
t = 1
lst_n = [1, 2]
lst = [t, lst_n]        # t、lst_n的引用值拿过来了，并不是数据拷贝

print(t is lst[0])      # True
print(lst_n is lst[1])  # True


# 重复，合并只是拷贝引用值(所以当对象是可变的时候要特别注意)
lst = ['123', [1, 2]]
x = lst * 2            # 重复: 引用值拷贝
print(x[0] is lst[0])  # True
print(x[0] is x[2])    # True
print(x[1] is lst[1])  # True
print(x[1] is x[3])    # True
print(x)               # ['123', [1, 2], '123', [1, 2]]

lst[0] = '321'  # 因为字符串不可变，lst[0]会指向'321', x[0]、x[2]还是指向'123'
lst[1][0] = 0   # lst[1]指向列表对象(x[1]、x[3]也指向该列表对象)，lst[1][0]=0: 将lst[1]指向的列表对象中的第一个元素指向对象0
print(x)               # ['123', [0, 2], '123', [0, 2]]

## 对象引用 end

# 列表对象方法调用
lst.append(任意对象)
lst.insert(index, 任意对象)  # index必须是数字,原>=index的元素向后移动
lst.extend(iterable)        # iterable中每一个元素依次append, lst.extend({'a': 1, 'b': 2}), 将key iterable后append
lst.pop()
lst.remove(index)           # index必须是数字,原>=index的元素向前移动
...



第五: 文件

@see chapter2-9.py


第六: 序列化

字符串编码解码
  编码: 字符序列编码成字节序列，字节序列用于存储和传输
  解码: 字节序列解码成字符序列
字符串编码解码是序列化概念中的特殊情况


序列化:     对象"序列化"成字节序列，字节序列用于存储和传输
反序列化:   字节序列"反序列化"成对象

json序列化:   对象序列化成json字符串，json字符串在存储和传输时encode成字节序列
json反序列化: json字符串反序列化成对象

@see xy-service-sample




