# encoding: utf-8
import math

# 2.5习题
# 1、python中表达式 2 * (3 + 4)的值是多少
# 运算优先级; 整数做加法得到整数; 整数做乘法得到整数;
print(2 * (3 + 4))  # 14


# 4、计算一个数字的平方跟
# 整数16转换成双精度浮点数16.0(整数值16被精确存储)，对16.0开方得到4.0
print(math.sqrt(16))  # 4.0
numb = 10009998
# 整数10009998转换成双精度浮点数10009998.0(整数值10009998被精确存储)，对10009998.0开方得到3163.8580878414885_061012373236226
print(math.sqrt(numb))  # 3163.8580878414887, 浮点数存储舍入: print(3163.8580878414885061012373236226)  # 3163.8580878414887


# 6、怎么能够截断或者舍去浮点数的小数部分
# math.trunc截断函数 or 使用floor除法
flt = 12.45
print(math.trunc(flt))  # 12
flt = -12.456
print(math.trunc(flt))  # -12
flt = 18014398509481985.45
print(math.trunc(flt))  # 18014398509481984, 双精度浮点数的整数部分超过 2^54-1 时, 存储时整数部分精度丢失，使用trunc函数得到的整数是精度丢失之后的值
print(12.1 // 2)        # 6.0
print(-12.1 // 2)       # -7.0

# 7、如何将一个整数转化为一个浮点数 (Python中，cast operator 没有场景)
# 整数转换成浮点数的讨论, see FloatingPointTypeTest.java
numb = 18
flt = numb / 1    # 18.0
print(flt)
flt = float(numb)
print(flt)        # 18.0


